//
// create-runtime-and-deploy-to-dev
//
// This Jenkins pipeline copies the gzipped output of core-build-pipeline into the 
// dotnetcore-runtime base image to create the scj-booking-runtime image.  
// Then it tags the image with 'dev' so it will be deployed to the dev environment
//

def APP_NAME = 'scj-booking-runtime'
def BUILD_CONFIG = APP_NAME
def IMAGESTREAM_NAME = APP_NAME

node {
  properties([[$class: 'BuildDiscarderProperty', strategy: [$class: 'LogRotator', artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10']]])  

  stage('create-runtime') {
    echo "Building: " + BUILD_CONFIG
    openshiftBuild bldCfg: BUILD_CONFIG, showBuildLogs: 'true'

    // Don't tag with BUILD_ID so the pruner can do it's job; it won't delete tagged images.
    // Tag the images for deployment based on the image's hash
    IMAGE_HASH = sh (
      script: """oc get istag ${IMAGESTREAM_NAME}:latest -o template --template=\"{{.image.dockerImageReference}}\"|awk -F \":\" \'{print \$3}\'""",
      returnStdout: true).trim()
    echo ">> IMAGE_HASH: ${IMAGE_HASH}"
  }

  stage('deploy-to-dev') {
    openshiftTag destStream: IMAGESTREAM_NAME, verbose: 'true', destTag: 'dev', srcStream: IMAGESTREAM_NAME, srcTag: "${IMAGE_HASH}"
  }
}